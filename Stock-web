<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Control de Stock de Productos Avanzado</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <!-- Custom Styles -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .new-item {
            animation: fadeIn 0.5s ease-out;
        }
        .modal-backdrop {
            background-color: rgba(0,0,0,0.5);
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="container mx-auto p-4 md:p-8 max-w-5xl">
        
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-gray-900">Control de Stock de Productos</h1>
            <p class="text-gray-600 mt-2">Gestiona tu inventario de forma completa: agrega, vende, edita y busca productos.</p>
        </header>

        <!-- Formulario para agregar/actualizar productos -->
        <div class="bg-white p-6 rounded-lg shadow-md mb-8">
            <h2 class="text-2xl font-semibold mb-4">Agregar Producto</h2>
            <form id="stock-form" class="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                <div>
                    <label for="product-code" class="block text-sm font-medium text-gray-700">Código del Producto</label>
                    <input type="text" id="product-code" required class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div>
                    <label for="product-name" class="block text-sm font-medium text-gray-700">Nombre del Producto</label>
                    <input type="text" id="product-name" required class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div>
                    <label for="product-quantity" class="block text-sm font-medium text-gray-700">Cantidad a Agregar</label>
                    <input type="number" id="product-quantity" min="1" required class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div class="md:col-span-3">
                    <button type="submit" class="w-full bg-indigo-600 text-white py-2 px-4 rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 font-semibold">
                        <i class="fas fa-plus mr-2"></i>Agregar / Actualizar Stock
                    </button>
                </div>
            </form>
        </div>

        <!-- Mensajes para el usuario -->
        <div id="message-container" class="mb-4 text-center"></div>

        <!-- Listado de productos -->
        <div class="bg-white p-6 rounded-lg shadow-md">
            <div class="flex flex-col md:flex-row justify-between items-center mb-4">
                <h2 class="text-2xl font-semibold">Inventario Actual</h2>
                <div class="relative mt-4 md:mt-0">
                    <span class="absolute inset-y-0 left-0 flex items-center pl-3">
                        <i class="fas fa-search text-gray-400"></i>
                    </span>
                    <input type="text" id="search-input" placeholder="Buscar por código o nombre..." class="pl-10 pr-4 py-2 border rounded-lg w-full md:w-64">
                </div>
            </div>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Código</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cantidad</th>
                            <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="product-list" class="bg-white divide-y divide-gray-200">
                        <!-- Las filas de productos se insertarán aquí dinámicamente -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Modal para Vender Producto -->
    <div id="sell-modal" class="fixed inset-0 z-50 hidden items-center justify-center modal-backdrop">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md m-4">
            <h3 class="text-xl font-semibold mb-4">Vender Producto: <span id="sell-product-name" class="font-bold"></span></h3>
            <p class="mb-2">Stock actual: <span id="sell-product-stock" class="font-bold"></span></p>
            <div>
                <label for="sell-quantity" class="block text-sm font-medium text-gray-700">Cantidad a vender</label>
                <input type="number" id="sell-quantity" min="1" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
            </div>
            <div class="mt-6 flex justify-end space-x-3">
                <button id="cancel-sell" class="bg-gray-200 text-gray-800 py-2 px-4 rounded-md hover:bg-gray-300">Cancelar</button>
                <button id="confirm-sell" class="bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700"><i class="fas fa-dollar-sign mr-2"></i>Confirmar Venta</button>
            </div>
        </div>
    </div>

    <!-- Modal para Confirmar Eliminación -->
    <div id="delete-modal" class="fixed inset-0 z-50 hidden items-center justify-center modal-backdrop">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md m-4">
            <h3 class="text-xl font-semibold mb-4 text-red-600"><i class="fas fa-exclamation-triangle mr-2"></i>Confirmar Eliminación</h3>
            <p>¿Estás seguro de que quieres eliminar el producto <span id="delete-product-name" class="font-bold"></span>? Esta acción no se puede deshacer.</p>
            <div class="mt-6 flex justify-end space-x-3">
                <button id="cancel-delete" class="bg-gray-200 text-gray-800 py-2 px-4 rounded-md hover:bg-gray-300">Cancelar</button>
                <button id="confirm-delete" class="bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-700"><i class="fas fa-trash-alt mr-2"></i>Sí, Eliminar</button>
            </div>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, doc, onSnapshot, query, where, getDocs, deleteDoc, runTransaction, updateDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-stock-app';
        
        let db, auth, userId, productsCollectionRef;
        let allProducts = []; // Caché local para la búsqueda
        let currentlyEditing = null; // ID del producto que se está editando

        // --- INICIALIZACIÓN Y AUTENTICACIÓN ---
        async function initializeFirebase() {
            try {
                const app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);
                
                onAuthStateChanged(auth, user => {
                    if (user) {
                        userId = user.uid;
                        productsCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/products`);
                        listenForProductChanges();
                    }
                });

                if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                    await signInWithCustomToken(auth, __initial_auth_token);
                } else {
                    await signInAnonymously(auth);
                }
            } catch (error) {
                console.error("Error al inicializar Firebase:", error);
                displayMessage("Error crítico al conectar con la base de datos.", "error");
            }
        }

        // --- RENDERIZADO Y LÓGICA DE UI ---
        
        function renderProducts(filter = '') {
            const productList = document.getElementById('product-list');
            productList.innerHTML = '';
            
            const lowerCaseFilter = filter.toLowerCase();
            const filteredProducts = allProducts.filter(p => 
                p.name.toLowerCase().includes(lowerCaseFilter) || 
                p.code.toLowerCase().includes(lowerCaseFilter)
            );

            if (filteredProducts.length === 0) {
                productList.innerHTML = `<tr><td colspan="4" class="px-6 py-4 text-center text-gray-500">${allProducts.length === 0 ? 'No hay productos en el inventario.' : 'No se encontraron productos.'}</td></tr>`;
                return;
            }

            filteredProducts.forEach(product => {
                const tr = document.createElement('tr');
                tr.dataset.productId = product.id;
                
                if (currentlyEditing === product.id) {
                    tr.innerHTML = getEditRowHTML(product);
                } else {
                    tr.innerHTML = getDisplayRowHTML(product);
                }
                productList.appendChild(tr);
            });
        }

        function getDisplayRowHTML(product) {
            return `
                <td class="px-6 py-4 whitespace-nowrap"><div class="text-sm font-medium text-gray-900">${product.code}</div></td>
                <td class="px-6 py-4 whitespace-nowrap"><div class="text-sm text-gray-800">${product.name}</div></td>
                <td class="px-6 py-4 whitespace-nowrap"><span class="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full ${product.quantity > 10 ? 'bg-green-100 text-green-800' : (product.quantity > 0 ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800')}">${product.quantity}</span></td>
                <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium space-x-2">
                    <button data-action="sell" class="text-green-600 hover:text-green-900" title="Vender"><i class="fas fa-dollar-sign"></i></button>
                    <button data-action="edit" class="text-blue-600 hover:text-blue-900" title="Editar"><i class="fas fa-edit"></i></button>
                    <button data-action="delete" class="text-red-600 hover:text-red-900" title="Eliminar"><i class="fas fa-trash-alt"></i></button>
                </td>
            `;
        }

        function getEditRowHTML(product) {
            return `
                <td class="px-6 py-4"><input type="text" value="${product.code}" class="edit-code w-full border rounded px-2 py-1"></td>
                <td class="px-6 py-4"><input type="text" value="${product.name}" class="edit-name w-full border rounded px-2 py-1"></td>
                <td class="px-6 py-4"><span class="font-bold">${product.quantity}</span></td>
                <td class="px-6 py-4 text-center space-x-2">
                    <button data-action="save" class="text-green-600 hover:text-green-900" title="Guardar"><i class="fas fa-check"></i></button>
                    <button data-action="cancel" class="text-red-600 hover:text-red-900" title="Cancelar"><i class="fas fa-times"></i></button>
                </td>
            `;
        }

        function listenForProductChanges() {
            if (!productsCollectionRef) return;
            const q = query(productsCollectionRef);
            onSnapshot(q, (snapshot) => {
                allProducts = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                allProducts.sort((a, b) => a.code.localeCompare(b.code));
                renderProducts(document.getElementById('search-input').value);
            }, (error) => {
                console.error("Error al cargar productos: ", error);
                displayMessage("Error al obtener los datos del inventario.", "error");
            });
        }

        // --- MANEJADORES DE EVENTOS ---
        
        // Búsqueda
        document.getElementById('search-input').addEventListener('input', (e) => {
            renderProducts(e.target.value);
        });

        // Formulario de agregar stock
        document.getElementById('stock-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const code = document.getElementById('product-code').value.trim().toUpperCase();
            const name = document.getElementById('product-name').value.trim();
            const quantity = parseInt(document.getElementById('product-quantity').value);

            if (!code || !name || isNaN(quantity) || quantity <= 0) {
                displayMessage("Por favor, completa todos los campos correctamente.", "error");
                return;
            }

            try {
                await runTransaction(db, async (transaction) => {
                    const q = query(productsCollectionRef, where("code", "==", code));
                    const querySnapshot = await getDocs(q);
                    if (!querySnapshot.empty) {
                        const productDocRef = querySnapshot.docs[0].ref;
                        const productData = querySnapshot.docs[0].data();
                        const newQuantity = productData.quantity + quantity;
                        transaction.update(productDocRef, { quantity: newQuantity, name: name });
                        displayMessage(`Stock de ${code} actualizado.`, "success");
                    } else {
                        const newProductRef = doc(productsCollectionRef);
                        transaction.set(newProductRef, { code, name, quantity });
                        displayMessage(`Producto ${code} agregado.`, "success");
                    }
                });
                e.target.reset();
            } catch (error) {
                console.error("Error al agregar/actualizar producto: ", error);
                displayMessage("Ocurrió un error al guardar el producto.", "error");
            }
        });

        // Acciones en la lista de productos (Editar, Vender, Eliminar)
        document.getElementById('product-list').addEventListener('click', async (e) => {
            const button = e.target.closest('button');
            if (!button) return;

            const action = button.dataset.action;
            const row = button.closest('tr');
            const productId = row.dataset.productId;
            const product = allProducts.find(p => p.id === productId);

            if (action === 'edit') {
                currentlyEditing = productId;
                renderProducts(document.getElementById('search-input').value);
            } else if (action === 'cancel') {
                currentlyEditing = null;
                renderProducts(document.getElementById('search-input').value);
            } else if (action === 'save') {
                const newCode = row.querySelector('.edit-code').value.trim().toUpperCase();
                const newName = row.querySelector('.edit-name').value.trim();
                if (newCode && newName) {
                    try {
                        const productRef = doc(productsCollectionRef, productId);
                        await updateDoc(productRef, { code: newCode, name: newName });
                        displayMessage("Producto actualizado con éxito.", "success");
                        currentlyEditing = null;
                    } catch(err) {
                        displayMessage("Error al guardar los cambios.", "error");
                        console.error(err);
                    }
                } else {
                    displayMessage("El código y el nombre no pueden estar vacíos.", "error");
                }
            } else if (action === 'delete') {
                openDeleteModal(product);
            } else if (action === 'sell') {
                openSellModal(product);
            }
        });

        // --- LÓGICA DE MODALES ---
        
        const sellModal = document.getElementById('sell-modal');
        const deleteModal = document.getElementById('delete-modal');

        function openSellModal(product) {
            sellModal.querySelector('#sell-product-name').textContent = product.name;
            sellModal.querySelector('#sell-product-stock').textContent = product.quantity;
            const quantityInput = sellModal.querySelector('#sell-quantity');
            quantityInput.value = '1';
            quantityInput.max = product.quantity;
            sellModal.dataset.productId = product.id;
            sellModal.style.display = 'flex';
        }

        function openDeleteModal(product) {
            deleteModal.querySelector('#delete-product-name').textContent = `${product.code} - ${product.name}`;
            deleteModal.dataset.productId = product.id;
            deleteModal.style.display = 'flex';
        }

        function closeModal() {
            sellModal.style.display = 'none';
            deleteModal.style.display = 'none';
        }

        document.getElementById('cancel-sell').addEventListener('click', closeModal);
        document.getElementById('cancel-delete').addEventListener('click', closeModal);
        
        document.getElementById('confirm-delete').addEventListener('click', async () => {
            const productId = deleteModal.dataset.productId;
            try {
                await deleteDoc(doc(productsCollectionRef, productId));
                displayMessage("Producto eliminado.", "success");
                closeModal();
            } catch (error) {
                displayMessage("Error al eliminar el producto.", "error");
                console.error(error);
            }
        });

        document.getElementById('confirm-sell').addEventListener('click', async () => {
            const productId = sellModal.dataset.productId;
            const quantityToSell = parseInt(sellModal.querySelector('#sell-quantity').value);
            const product = allProducts.find(p => p.id === productId);

            if (isNaN(quantityToSell) || quantityToSell <= 0) {
                displayMessage("Ingresa una cantidad válida.", "error");
                return;
            }
            if (quantityToSell > product.quantity) {
                displayMessage("No puedes vender más stock del que tienes.", "error");
                return;
            }

            try {
                const productRef = doc(productsCollectionRef, productId);
                await updateDoc(productRef, {
                    quantity: product.quantity - quantityToSell
                });
                displayMessage(`${quantityToSell} unidad(es) de ${product.name} vendida(s).`, "success");
                closeModal();
            } catch (error) {
                displayMessage("Error al procesar la venta.", "error");
                console.error(error);
            }
        });

        // --- UTILIDADES ---
        
        function displayMessage(message, type = 'success') {
            const container = document.getElementById('message-container');
            const color = type === 'success' ? 'green' : 'red';
            container.innerHTML = `<div class="p-3 rounded-md bg-${color}-100 text-${color}-800 shadow-sm animate-pulse">${message}</div>`;
            setTimeout(() => {
                if (container.firstChild) container.firstChild.classList.remove('animate-pulse');
            }, 500);
            setTimeout(() => {
                container.innerHTML = '';
            }, 4000);
        }

        window.onload = initializeFirebase;
    </script>
</body>
</html>
